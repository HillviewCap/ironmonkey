"""Add etag and last_modified columns to rss_feed table

Revision ID: 0058483ec435
Revises: 
Create Date: 2024-10-01 21:24:44.547668

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '0058483ec435'
down_revision = None
branch_labels = None
depends_on = None


import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from alembic import op

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Add new columns to rss_feed table
    with op.batch_alter_table('rss_feed', schema=None) as batch_op:
        batch_op.add_column(sa.Column('etag', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('last_modified', sa.String(length=255), nullable=True))

    # Convert UUID columns
    tables_with_uuid = [
        'allgroups', 'allgroups_values', 'allgroups_values_names',
        'alltools', 'alltools_values', 'alltools_values_names',
        'awesome_threat_intel_blog', 'category', 'parsed_content',
        'parsed_content_categories', 'rss_feed', 'user'
    ]

    for table in tables_with_uuid:
        # Check if the temporary table already exists
        if not op.has_table(f'_tmp_{table}'):
            op.execute(f'CREATE TABLE _tmp_{table} AS SELECT * FROM {table}')
        
        op.drop_table(table)
        op.execute(f'CREATE TABLE {table} AS SELECT * FROM _tmp_{table}')
        op.drop_table(f'_tmp_{table}')

        with op.batch_alter_table(table, schema=None) as batch_op:
            batch_op.alter_column('uuid' if table not in ['awesome_threat_intel_blog', 'category', 'parsed_content', 'rss_feed', 'user'] else 'id',
                   existing_type=sa.NUMERIC(),
                   type_=postgresql.UUID(as_uuid=True),
                   existing_nullable=False,
                   postgresql_using="uuid::uuid")

    # Drop the _alembic_tmp_allgroups table if it exists
    op.execute("DROP TABLE IF EXISTS _alembic_tmp_allgroups")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Convert UUID columns back to NUMERIC
    tables_with_uuid = [
        'allgroups', 'allgroups_values', 'allgroups_values_names',
        'alltools', 'alltools_values', 'alltools_values_names',
        'awesome_threat_intel_blog', 'category', 'parsed_content',
        'parsed_content_categories', 'rss_feed', 'user'
    ]

    for table in tables_with_uuid:
        # Check if the temporary table already exists
        if not op.has_table(f'_tmp_{table}'):
            op.execute(f'CREATE TABLE _tmp_{table} AS SELECT * FROM {table}')
        
        op.drop_table(table)
        op.execute(f'CREATE TABLE {table} AS SELECT * FROM _tmp_{table}')
        op.drop_table(f'_tmp_{table}')

        with op.batch_alter_table(table, schema=None) as batch_op:
            batch_op.alter_column('uuid' if table not in ['awesome_threat_intel_blog', 'category', 'parsed_content', 'rss_feed', 'user'] else 'id',
                   existing_type=postgresql.UUID(as_uuid=True),
                   type_=sa.NUMERIC(),
                   existing_nullable=False,
                   postgresql_using="uuid::text::numeric")

    # Remove new columns from rss_feed table
    with op.batch_alter_table('rss_feed', schema=None) as batch_op:
        batch_op.drop_column('last_modified')
        batch_op.drop_column('etag')

    # Recreate the _alembic_tmp_allgroups table if it doesn't exist
    if not op.has_table('_alembic_tmp_allgroups'):
        op.create_table('_alembic_tmp_allgroups',
        sa.Column('uuid', sa.NUMERIC(), nullable=False),
        sa.Column('authors', sa.TEXT(), nullable=True),
        sa.Column('category', sa.VARCHAR(), nullable=True),
        sa.Column('name', sa.VARCHAR(), nullable=True),
        sa.Column('type', sa.VARCHAR(), nullable=True),
        sa.Column('source', sa.VARCHAR(), nullable=True),
        sa.Column('description', sa.TEXT(), nullable=True),
        sa.Column('tlp', sa.VARCHAR(), nullable=True),
        sa.Column('license', sa.VARCHAR(), nullable=True),
        sa.Column('last_db_change', sa.VARCHAR(), nullable=True),
        sa.PrimaryKeyConstraint('uuid')
        )

    # ### end Alembic commands ###
